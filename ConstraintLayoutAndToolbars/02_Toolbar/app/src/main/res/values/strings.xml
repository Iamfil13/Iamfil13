<resources>
    <string name="app_name">KotlinExample11.8</string>
    <string name="action_1">Action 1</string>
    <string name="action_2">Action 2</string>
    <string name="action_3">Action 3</string>
    <string name="search">Search</string>
    <string name="textview">TextView</string>
    <string name="long_text">
        На этом уроке мы рассмотрим инструмент CoordinatorLayout, а также новые способы реализации
        скролла контента.
        00:45 — Добавление необходимых зависимостей
        02:20 — Реализовываем на CoordinatorLayout следующую функциональность: у нас есть длинный
        контент, и когда пользователь начинает скроллить его вниз, тулбар, который находится поверх
        контента, начинает уезжать плавно за край экрана. Когда пользователь начинает скроллить
        контент наверх, тулбар обратно появляется на экране. Для скролла текста будем использовать
        NestedScrollView. Отличие NestedScrollView от ScrollView заключается в том, что
        NestedScrollView может выступать как дочерний или как родительский view к другому view,
        который имеет скролл, например, RecyclerView. И в этом случае события скролла не будут
        конфликтовать. Также, чтобы тулбар корректно заезжал, когда мы скролим контент, нам
        необходимо обрабатывать события скролла, которые имеются у NestedScrollView
        09:30 — Для того чтобы описать взаимодействие между view в CoordinatorLayout-те, нам
        необходимо использовать behavior. Они позволят перехватывать сами view, события изменения
        размеров, а также они вложены в прокрутку</string>
</resources>